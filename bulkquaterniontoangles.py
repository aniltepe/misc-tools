import math

def QuaternionToEulerAngles(q):
    sinr_cosp = 2 * (q[0] * q[1] + q[2] * q[3])
    cosr_cosp = 1 - 2 * (q[1] ** 2 + q[2] ** 2)
    x = math.atan2(sinr_cosp, cosr_cosp)
    
    sinp = 2 * (q[0] * q[2] - q[3] * q[1])
    y = math.asin(sinp)
    
    siny_cosp = 2 * (q[0] * q[3] + q[1] * q[2])
    cosy_cosp = 1 - 2 * (q[2] ** 2 + q[3] ** 2)
    z = math.atan2(siny_cosp, cosy_cosp)

    return [math.degrees(x), math.degrees(y), math.degrees(z)]

# spine2 joint animation quaternions frame by frame (from blender)
quaternions = '''0.996307 -0.077928 0.03384 0.012451
0.996325 -0.078153 0.032918 0.012072
0.996337 -0.078432 0.031996 0.011701
0.996331 -0.078949 0.031017 0.011343
0.996293 -0.079798 0.030154 0.011096
0.996198 -0.081055 0.029875 0.011218
0.996079 -0.082417 0.030043 0.011472
0.995953 -0.083764 0.030388 0.011741
0.995823 -0.08512 0.030764 0.01202
0.99569 -0.086481 0.031168 0.012306
0.995554 -0.087838 0.031588 0.012594
0.995417 -0.089184 0.032016 0.012882
0.995279 -0.090515 0.032447 0.013167
0.995142 -0.091817 0.032871 0.013443
0.995015 -0.092994 0.033304 0.013681
0.994913 -0.093898 0.033772 0.013842
0.994819 -0.09472 0.034163 0.013987
0.994748 -0.09535 0.034438 0.014111
0.994715 -0.095652 0.034505 0.014208
0.99472 -0.095621 0.034427 0.034427
0.994762 -0.095245 0.034228 0.014329
0.994839 -0.094507 0.034026 0.014354
0.994937 -0.093509 0.033938 0.014327
0.99505 -0.092334 0.033891 0.014203
0.995171 -0.091055 0.033863 0.014004
0.995293 -0.089772 0.033814 0.013779
0.995412 -0.08854 0.033692 0.013442
0.995536 -0.087271 0.033474 0.013048
0.995669 -0.085923 0.03316 0.01268
0.995784 -0.084739 0.032827 0.012475
0.995891 -0.083622 0.032498 0.012302
0.995981 -0.08269 0.032176 0.012174
0.996052 -0.081952 0.031908 0.012087
0.996115 -0.081255 0.031755 0.011996
0.996175 -0.080576 0.031633 0.011906
0.996235 -0.079887 0.031521 0.011817
0.996302 -0.079102 0.031431 0.011736
0.99635 -0.078432 0.031601 0.011654
0.996396 -0.077784 0.031808 0.011571
0.996432 -0.07721 0.032089 0.01148
0.996444 -0.076825 0.032707 0.011315
0.996433 -0.076783 0.033135 0.011289
0.996424 -0.076922 0.03301 0.011489
0.996414 -0.077129 0.03274 0.011752
0.996404 -0.077335 0.032469 0.012016'''

quat_split = quaternions.replace("\n", " ").split(" ")

angles_bulk = ""

for i in range(0, len(quat_split), 4):
    angles = QuaternionToEulerAngles([float(quat_split[i]), float(quat_split[i + 1]), float(quat_split[i + 2]), float(quat_split[i + 3])])
    angles_bulk += "{:.4f}".format(angles[0]) + " " + "{:.4f}".format(angles[1]) + " " + "{:.4f}".format(angles[2]) + " "

print(angles_bulk[:-1])